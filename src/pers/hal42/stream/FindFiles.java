package pers.hal42.stream;

import pers.hal42.logging.ErrorLogStream;
import pers.hal42.text.TextList;

import java.io.File;
import java.io.FileFilter;

public class FindFiles {

  protected static final ErrorLogStream dbg = ErrorLogStream.getForClass(FindFiles.class);

  /**
   * filterStr is something like ".java" (JUST LOOKS FOR EXTENSIONS RIGHT NOW!)
   * it is case-sensitive
   * try to use these first:
   */
  public static TextList FindFilesUnder(String startDirStr, String filterStr, boolean recurse) {
    return FindFilesFrom(new File(startDirStr), new TailFilter(filterStr), recurse);
  }

  public static TextList FindDirsUnder(String startDirStr, boolean recurse) {
    return FindFilesFrom(new File(startDirStr), new DirFilter(), recurse);
  }

  /**
   * try to use the above ones first (protect these?)
   */
  public static TextList FindFilesFrom(File startDir, FileFilter filter, boolean recurse) {
    TextList v = new TextList(60, 20);
    FindFilesFrom(v, startDir, filter, recurse ? new DirFilter() : null);
    return v;
  }

  /**
   * @param fileList list of names generated by 'FindFilesFrom'
   * @param stale    leave out stale files and directories per this list
   * @return a new list which is reduced from the given list
   */

  public static TextList ExcludeFilesFrom(TextList fileList, String stale[]) {
    TextList reduced = new TextList(fileList.size());
    for (int i = fileList.size(); i-- > 0; ) {
      String filename = fileList.itemAt(i);
      boolean passed = true;
      for (int ex = stale.length; ex-- > 0; ) {
        String exclude = stale[ex];
        if (filename.contains(exclude)) {//this screwed up makeall's "stale" list.
          passed = false;
          break;
        }
      }
      if (passed) {
        reduced.add(filename);
      }
    }
    return reduced;
  }

  public static void FindFilesFrom(TextList files, File startDir, FileFilter filter, DirFilter df) {
    /*
    // debugging
    String [] filenames = startDir.list();
    dbg.Message(filenames.length + " files & dirs found in " + startDir.getName());
    for(int i = filenames.length; i-->0;) {
      dbg.Message(" -- " + filenames[i]);
    }
    */
    // could also probably do this with a stack and not go recursive
    // find all files in this directory & add to the list
    File subfiles[] = IOX.listFiles(startDir, filter);
    for (int i = subfiles.length; i-- > 0; ) {
      files.add(subfiles[i].getPath());
    }
    if (df != null) {  // user says to recurse
      // find all directories in this directory, look through them recursively
      subfiles = IOX.listFiles(startDir, df);
      for (int i = subfiles.length; i-- > 0; ) {
        FindFilesFrom(files, subfiles[i], filter, df);
      }
    }
  }

  // +++ give more options later!
  public static void main(String args[]) {
//    ErrorLogStream.Console(ErrorLogStream.VERBOSE);
    if (args.length == 2) {
      TextList files = FindFilesUnder(args[0], args[1], true);
      int len = files.size();
      for (int i = 0; i < len; i++) {
        dbg.VERBOSE(files.itemAt(i));
      }
    } else {
      dbg.VERBOSE("FindFiles startDir \".java\"");
    }
  }

}
//$Id: FindFiles.java,v 1.2 2004/01/09 11:46:05 mattm Exp $
